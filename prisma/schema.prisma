// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Product{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      price Int
      offerPrice Int?
      stock Int?
      ImagePath String?
      description String
      isAvailable Boolean? @default(true)
      createdAt DateTime @default(now())
      category String?
      order Order[]
      sellerId String? @db.ObjectId
      seller Seller? @relation(fields: [sellerId], references: [id])

      carts Cart[]

      sales sales[]
}

model Buyer{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      email String @unique
      contactNo String
      createdAt DateTime @default(now())
      isActive Boolean @default(true)
      orders Order[]
      cart Cart[]
}

model Cart{
      id String @id @default(auto()) @map("_id") @db.ObjectId
       createdAt DateTime @default(now())
      user Buyer @relation(fields: [userId], references: [id], onDelete: Cascade)
      userId String @db.ObjectId

      product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
      productId String @db.ObjectId

}


model Seller{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      email String @unique
      contactNo String

      storeName String @unique

      citizenshipImagePath String
      citizenshipImagePath2 String

      isVerified Boolean @default(false)
      createdAt DateTime @default(now())
      isActive Boolean @default(false)
      products Product[]

}

model sales{
      id String @id @default(auto()) @map("_id") @db.ObjectId

      buyer String @db.ObjectId
      seller String @db.ObjectId
      product   Product  @relation(fields: [productId], references: [id])
      productId String   @db.ObjectId
      createdAt DateTime @default(now())

}


model Order{
      is String @id @default(auto()) @map("_id") @db.ObjectId
      pricePaid Int
      createdAt DateTime @default(now())
      user Buyer @relation(fields: [userId], references: [id], onDelete: Cascade)
      userId String @db.ObjectId

      product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
      productId String @db.ObjectId
}





