// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Product{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      price Int
      offerPrice Int?
      stock Int?
      ImagePath String?
      description String
      isAvailable Boolean? @default(true)
      createdAt DateTime @default(now())
      category String?
      order Order[]
      sellerId String? @db.ObjectId
      seller Seller? @relation(fields: [sellerId], references: [id])

      carts Cart[]

      sales sales[]
}

model Account{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      userId String @db.ObjectId
      type String
      provider String
      providerAccountId String
      refresh_token String? @db.String
      access_token String? @db.String
      expires_at Int?
      token_type String?
      scope String?
      id_token String? @db.String
      session_state String?

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@unique([provider, providerAccountId])
}



model User {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String?
      email String? @unique
      emailVerified DateTime?
      image String?
      role String?
      createdAt DateTime @default(now())
      isActive Boolean @default(true)

      accounts Account[]
      sessions session[]
      buyers Buyer[]
      sellers Seller[]
}
model session {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      sessionToken String @unique
      userId String @db.ObjectId
      Expires DateTime
      user User @relation(fields: [userId], references: [id], onDelete:Cascade)
}


model Buyer{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      userId String @db.ObjectId
      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
      contactNo String?
      orders Order[]
      cart Cart[]
}

model Seller{
       id String @id @default(auto()) @map("_id") @db.ObjectId
      userId String @db.ObjectId
      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
      storeName String @unique
      storeDescription String?
      citizenshipImagePath String?
      citizenshipImagePath2 String?
      contactNo String?
      storeAddress String?
      isVerified Boolean @default(false)
      createdAt DateTime @default(now())
      isActive Boolean @default(false)
      products Product[]

}

model Cart{
      id String @id @default(auto()) @map("_id") @db.ObjectId
       createdAt DateTime @default(now())
      user Buyer @relation(fields: [userId], references: [id], onDelete: Cascade)
      userId String @db.ObjectId
      qty Int?
      product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
      productId String @db.ObjectId
      status String? @default("")
      purchasedOn DateTime?
      deliveredOn DateTime?

}

model sales{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      pricePaid Int
      buyer String @db.ObjectId
      seller String @db.ObjectId
      product   Product  @relation(fields: [productId], references: [id])
      productId String   @db.ObjectId
      createdAt DateTime @default(now())
}

model Order{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      pricePaid Int
      createdAt DateTime @default(now())
      user Buyer @relation(fields: [userId], references: [id], onDelete: Cascade)
      userId String @db.ObjectId
      qty Int?
      product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
      productId String @db.ObjectId
}

model review{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      rating Int?
      review String?
      userId String @db.ObjectId
      productId String @db.ObjectId
      createdAt DateTime @default(now())
      
}




